// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "erd.svg"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GUEST
  PLAYER
}

enum GameType {
  EMOJI_HERO
  QUOTE_HERO
}

enum MatchDifficulty {
  EASY
  MEDIUM
  HARD
}

enum GameStatus {
  ACTIVE
  INACTIVE
}

enum MatchStatus {
  STARTED
  FINISHED_WIN
  FINISHED_LOSE
}

enum HeroAttr {
  STR
  AGI
  INT
  UNI
}

enum HeroAttackType {
  MELEE
  RANGED
}

enum HeroRole {
  CARRY
  DISABLER
  DURABLE
  ESCAPE
  INITIATOR
  JUNGLER
  NUKER
  PUSHER
  SUPPORT
}

model User {
  id                      Int             @id @default(autoincrement())
  username                String          @unique
  birthDate               DateTime?       @db.Date
  email                   String          @unique
  passwordHash            String
  avatar                  String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  roles                   Role[]          @default([GUEST])
  matches                 Match[]
  gamesCreatedBy          Game[]          @relation("CreatedByUser")
  gamesUpdatedBy          Game[]          @relation("UpdatedByUser")
  emojiHeroGamesCreatedBy EmojiHeroGame[] @relation("CreatedByUser")
  emojiHeroGamesUpdatedBy EmojiHeroGame[] @relation("UpdatedByUser")
  quoteHeroGamesCreatedBy QuoteHeroGame[] @relation("CreatedByUser")
  quoteHeroGamesUpdatedBy QuoteHeroGame[] @relation("UpdatedByUser")
  matchCreatedBy          Match[]         @relation("CreatedByUser")
}

model Hero {
  id             Int             @id @default(autoincrement())
  dotaId         Int             @unique
  name           String
  dotaName       String
  primaryAttr    HeroAttr
  attackType     HeroAttackType
  roles          HeroRole[]
  avatar         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  emojiHeroGames EmojiHeroGame[]
  quoteHeroGames QuoteHeroGame[]
  MatchAttempt   MatchTry[]
}

model Game {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  type           GameType        @unique
  status         GameStatus      @default(INACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      User            @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById    Int
  updatedBy      User?           @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById    Int?
  emojiHeroGames EmojiHeroGame[]
  quoteHeroGames QuoteHeroGame[]
}

model EmojiHeroGame {
  id          Int             @id @default(autoincrement())
  heroId      Int
  hero        Hero            @relation(fields: [heroId], references: [id])
  gameId      Int
  game        Game            @relation(fields: [gameId], references: [id])
  emojis      String[]
  difficulty  MatchDifficulty @default(EASY)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User?           @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById Int?
  matches     Match[]
}

model QuoteHeroGame {
  id          Int      @id @default(autoincrement())
  heroId      Int
  hero        Hero     @relation(fields: [heroId], references: [id])
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  quote       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById Int?
  matches     Match[]
}

model Match {
  id                       Int            @id @default(autoincrement())
  emojiHeroGameId          Int
  emojiHeroGame            EmojiHeroGame  @relation(fields: [emojiHeroGameId], references: [id])
  status                   MatchStatus    @default(STARTED)
  score                    Int            @default(0)
  attemptMax               Int?           @default(3)
  attemptTimeMax           Int?           @default(60)
  attemptPerTime           Int?           @default(10)
  attemptPerScore          Int?           @default(10)
  attemptPerScoreDecrement Int?           @default(1)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  createdBy                User           @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById              Int
  matchTries               MatchTry[]
  quoteHeroGame            QuoteHeroGame? @relation(fields: [quoteHeroGameId], references: [id])
  quoteHeroGameId          Int?
  User                     User?          @relation(fields: [userId], references: [id])
  userId                   Int?
}

model MatchTry {
  id        Int      @id @default(autoincrement())
  hero      Hero     @relation(fields: [heroId], references: [id])
  score     Int
  heroId    Int
  matchId   Int
  match     Match    @relation(fields: [matchId], references: [id])
  createdAt DateTime @default(now())
}
